При запуске программы, как и раньше, указывается число дочерних процессов 
в полносвязной топологии. Последние X параметров задают начальные балансы 
для каждого из счетов. Например, следующая команда: ./pa2 -p 3 10 20 30 
означает, что в банковской системе три счета (точнее три филиала, каждый 
из которых обслуживает всего один счет) с идентификаторами 1, 2, 3 и с 
начальными балансами $10, $20, $30 соответственно. 

Для отслеживания времени все процессы используют физические часы, 
реализованные функцией get_physical_time(), входящей в библиотеку 
libruntime.so, предоставляемую преподавателем. Для формирования временных 
отметок t процессы должны использовать исключительно функцию get_physical_time(). 

Процесс «К» реализуется на основе родительского процесса, процессы «С» — 
на основе дочерних процессов из лабораторной работы №1. После того, как 
получены сообщения STARTED от всех процессов «С», процесс «К» должен 
вызвать функцию bank_robbery(), которая выполняет ряд переводов денег 
между произвольными процессами «С» посредством вызовов функции transfer(). 

Перевод описывает структура TransferOrder, передаваемая сообщением типа 
TRANSFER. При выполнении перевода процесс «К» отправляет сообщение TRANSFER 
процессу «Csrc», после чего переходит в режим ожидания подтверждения 
(пустое сообщение типа ACK) процессом «Сdst» получения перевода. Переводы 
могут быть инициированы только процессом «К». После выполнения функции 
bank_robbery() процесс «К» отправляет сообщение STOP всем процессам «С» 
и дожидается получения сообщения DONE от всех дочерних процессов. После 
этого процесс «К» должен получить от каждого процесса «С» сообщение BALANCE_HISTORY, 
содержащее структуру BalanceHistory. Структуры BalanceHistory от всех процессов «С» 
агрегируются в структуру AllHistory, которая должна быть использована в качестве а
ргумента функции print_history() перед завершением родительского процесса. 
Функция print_history() реализуется библиотекой, поставляемой вместе с 
заданием.
